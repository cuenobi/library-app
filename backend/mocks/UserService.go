// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	model "library-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Authentication provides a mock function with given fields: username, password
func (_m *UserService) Authentication(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authentication")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Authentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authentication'
type UserService_Authentication_Call struct {
	*mock.Call
}

// Authentication is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *UserService_Expecter) Authentication(username interface{}, password interface{}) *UserService_Authentication_Call {
	return &UserService_Authentication_Call{Call: _e.mock.On("Authentication", username, password)}
}

func (_c *UserService_Authentication_Call) Run(run func(username string, password string)) *UserService_Authentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserService_Authentication_Call) Return(_a0 string, _a1 error) *UserService_Authentication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Authentication_Call) RunAndReturn(run func(string, string) (string, error)) *UserService_Authentication_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLibrarian provides a mock function with given fields: user
func (_m *UserService) CreateLibrarian(user *model.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateLibrarian")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateLibrarian_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLibrarian'
type UserService_CreateLibrarian_Call struct {
	*mock.Call
}

// CreateLibrarian is a helper method to define mock.On call
//   - user *model.User
func (_e *UserService_Expecter) CreateLibrarian(user interface{}) *UserService_CreateLibrarian_Call {
	return &UserService_CreateLibrarian_Call{Call: _e.mock.On("CreateLibrarian", user)}
}

func (_c *UserService_CreateLibrarian_Call) Run(run func(user *model.User)) *UserService_CreateLibrarian_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *UserService_CreateLibrarian_Call) Return(_a0 error) *UserService_CreateLibrarian_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateLibrarian_Call) RunAndReturn(run func(*model.User) error) *UserService_CreateLibrarian_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *UserService) CreateUser(user *model.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *model.User
func (_e *UserService_Expecter) CreateUser(user interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *UserService_CreateUser_Call) Run(run func(user *model.User)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(*model.User) error) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
