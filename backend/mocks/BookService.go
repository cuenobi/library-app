// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	model "library-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

type BookService_Expecter struct {
	mock *mock.Mock
}

func (_m *BookService) EXPECT() *BookService_Expecter {
	return &BookService_Expecter{mock: &_m.Mock}
}

// Borrow provides a mock function with given fields: bookID, userID
func (_m *BookService) Borrow(bookID string, userID string) error {
	ret := _m.Called(bookID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Borrow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bookID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookService_Borrow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Borrow'
type BookService_Borrow_Call struct {
	*mock.Call
}

// Borrow is a helper method to define mock.On call
//   - bookID string
//   - userID string
func (_e *BookService_Expecter) Borrow(bookID interface{}, userID interface{}) *BookService_Borrow_Call {
	return &BookService_Borrow_Call{Call: _e.mock.On("Borrow", bookID, userID)}
}

func (_c *BookService_Borrow_Call) Run(run func(bookID string, userID string)) *BookService_Borrow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *BookService_Borrow_Call) Return(_a0 error) *BookService_Borrow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookService_Borrow_Call) RunAndReturn(run func(string, string) error) *BookService_Borrow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBook provides a mock function with given fields: book
func (_m *BookService) CreateBook(book *model.Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookService_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type BookService_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - book *model.Book
func (_e *BookService_Expecter) CreateBook(book interface{}) *BookService_CreateBook_Call {
	return &BookService_CreateBook_Call{Call: _e.mock.On("CreateBook", book)}
}

func (_c *BookService_CreateBook_Call) Run(run func(book *model.Book)) *BookService_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Book))
	})
	return _c
}

func (_c *BookService_CreateBook_Call) Return(_a0 error) *BookService_CreateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookService_CreateBook_Call) RunAndReturn(run func(*model.Book) error) *BookService_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBook provides a mock function with no fields
func (_m *BookService) GetAllBook() ([]*model.Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBook")
	}

	var r0 []*model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookService_GetAllBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBook'
type BookService_GetAllBook_Call struct {
	*mock.Call
}

// GetAllBook is a helper method to define mock.On call
func (_e *BookService_Expecter) GetAllBook() *BookService_GetAllBook_Call {
	return &BookService_GetAllBook_Call{Call: _e.mock.On("GetAllBook")}
}

func (_c *BookService_GetAllBook_Call) Run(run func()) *BookService_GetAllBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BookService_GetAllBook_Call) Return(_a0 []*model.Book, _a1 error) *BookService_GetAllBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookService_GetAllBook_Call) RunAndReturn(run func() ([]*model.Book, error)) *BookService_GetAllBook_Call {
	_c.Call.Return(run)
	return _c
}

// Return provides a mock function with given fields: bookID, userID
func (_m *BookService) Return(bookID string, userID string) error {
	ret := _m.Called(bookID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Return")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bookID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookService_Return_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Return'
type BookService_Return_Call struct {
	*mock.Call
}

// Return is a helper method to define mock.On call
//   - bookID string
//   - userID string
func (_e *BookService_Expecter) Return(bookID interface{}, userID interface{}) *BookService_Return_Call {
	return &BookService_Return_Call{Call: _e.mock.On("Return", bookID, userID)}
}

func (_c *BookService_Return_Call) Run(run func(bookID string, userID string)) *BookService_Return_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *BookService_Return_Call) Return(_a0 error) *BookService_Return_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookService_Return_Call) RunAndReturn(run func(string, string) error) *BookService_Return_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
